{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
		"echo in html code":{
			"scope": "php, html",
			"prefix": "phpecho",
			"body": [
				"<?php echo( $1 ); ?>"
			],
			"description": "print echo with php tags"
		},

		"component funct react":{
			"scope": "javascript",
			"prefix": "com",
			"body": [
				"const ${1:componentName} = () => {",
				"    return(",
				"        ${2:jsxCode}",
				"    );",
				"};"
			]
		},

		"import es6":{
			"scope": "javascript",
			"prefix": "imp",
			"body": [
				"import ${1:\\{component\\}} from '${2:source}';"
			]
		},

		"arrow function es6":{
			"scope": "javascript",
			"prefix": "arr",
			"body": [
				"() => {",
				"    ${2:jsxCode}",
				"};"
			]
		},

		"jsx component":{
			"scope": "javascript",
			"prefix": "jsxcoms",
			"body": "<${1:componentName} ${2:attributes} />\n$0"
		},

		"jsx container":{
			"scope": "javascript",
			"prefix": "jsxcon",
			"body": [
				"<${1:containerName}>",
				"    ${2:components}",
				"</${1:containerName}>"
			]
		},

		"export default":{
			"scope": "javascript",
			"prefix": "expo",
			"body": [
				"export default ${1:component}"
			]
		}
}