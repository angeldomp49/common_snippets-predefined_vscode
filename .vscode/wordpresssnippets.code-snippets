{
	// Place your snippets workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"wpaction":{
		"scope": "php,html",
		"prefix": "wpaction",
		"body": [
			"if(!function_exists('${1:functionName}')) {",
			"    function ${1:functionName}($${2:params}){",
			"        ${4:code}",
			"    }",
			"}",
			"",
			"add_action('${3:actionName}', '${1:functionName}');"
		]
	},
	"wpfilter":{
		"scope": "php,html",
		"prefix": "wpfilter",
		"body": [
			"if(!function_exists('${1:functionName}')) {",
			"    function ${1:functionName}(${2:params}){",
			"        ${5:code}",
			"        return ${4:default};",
			"    }",
			"}",
			"",
			"add_filter('${3:filterName}', '${1:functionName}');"
		]
	},
	"doaction":{
		"scope": "php,html",
		"prefix": "doaction",
		"body": [
			"do_action('${1:actionName}', $${2:paramsNumber});"
		]
	},
	"applyfilters":{
		"scope": "php,html",
		"prefix": "applyfilters",
		"body": [
			"apply_filters('${1:filterName}', ${2:priority}, ${3:paramsNumber});"
		]
	},
	"addshortcode":{
		"scope": "php,html",
		"prefix": "addshort",
		"body": [
			"if(!function_exists('${1:functionName}')) {",
			"    function ${1:functionName}($args){",
			"        ${3:code}",
			"    }",
			"}",
			"",
			"add_shortcode('${2:shortcode}', '${1:functionName}');"
		]
	},
	"plugininfo":{
		"scope": "php",
		"prefix": "plugininfo",
		"body": [
			"/*",
			"Plugin Name: ${1:pluginName}",
			"Plugin URI: ${2:pluginUrl}",
			"Description: ${3:pluginDescription}",
			"Author: ${4:pluginAuthor}",
			"Version: ${5:1.0.0}",
			"Author URI: ${6:authorUrl}",
			"License: ${7:GPL-2.0+}",
			"License URI: ${8:http://www.gnu.org/licenses/gpl-2.0.txt}",
			"*/"
		]
	},
	"pluginpath":{
		"scope": "php",
		"prefix": "pluginpath",
		"body": [
			"global $${1:pluginName}_PLUGIN_DIR_PATH;",
			"$${1:pluginName}_PLUGIN_DIR_PATH = plugin_dir_path(__FILE__);"
		]	
	},
	"pluginurl":{
		"scope": "php",
		"prefix": "pluginurl",
		"body": [
			"global $${1:pluginName}_PLUGIN_DIR_URL;",
			"$${1:pluginName}_PLUGIN_DIR_URL = plugin_dir_url(__FILE__);"
		]	
	}
}